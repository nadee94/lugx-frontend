name: CI/CD for Lugx Platform

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push frontend
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/lugx-frontend:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/lugx-frontend:latest

    # Build and push order service
    - name: Build and Push Order Service Image
      uses: docker/build-push-action@v4
      with:
        context: ./order_service
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/order-service:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/order-service:latest

    - name: Validate SSH Key
      run: |
        echo "Validating SSH key format..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keygen -l -f ~/.ssh/deploy_key || (echo "Invalid SSH key format"; exit 1)

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "=== DEPLOYING ORDER SERVICE ==="
          # Apply database components first
          kubectl apply -f ~/lugx-frontend/order_service/order-postgres-deployment.yaml
          kubectl apply -f ~/lugx-frontend/order_service/order-postgres-service.yaml
          
          # Then deploy the order service
          kubectl apply -f ~/lugx-frontend/order_service/order-service-deployment.yaml
          kubectl apply -f ~/lugx-frontend/order_service/order-service-service.yaml
          kubectl rollout status deployment/order-service --timeout=180s
          
          echo "=== BLUE-GREEN FRONTEND DEPLOYMENT ==="
          CURRENT_COLOR=$(kubectl get svc lugx-frontend -o jsonpath='{.spec.selector.color}' || echo "blue")
          
          if [ "$CURRENT_COLOR" = "blue" ]; then
            NEW_COLOR="green"
          else
            NEW_COLOR="blue"
          fi
          
          kubectl apply -f ~/lugx-frontend/deployement-iit-nginx-image.yml
          kubectl rollout status deployment/lugx-frontend --timeout=180s
          kubectl patch svc lugx-frontend -p "{\"spec\":{\"selector\":{\"color\":\"${NEW_COLOR}\"}}}"
          kubectl scale deployment/lugx-frontend-$CURRENT_COLOR --replicas=0

          echo "=== VERIFICATION ==="
          kubectl get pods
          kubectl get svc
          echo "Frontend is now running on ${NEW_COLOR} environment"
          echo "Order Service is running at:"
          kubectl get svc order-service -o jsonpath='{.spec.clusterIP}'
