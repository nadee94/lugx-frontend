name: CI/CD for Lugx Platform

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push frontend
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/iit-nginx-static:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/iit-nginx-static:latest

    # Build and push order service
    - name: Build and Push Order Service Image
      uses: docker/build-push-action@v4
      with:
        context: ./order_service
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/order-service:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/order-service:latest

    - name: Validate SSH Key
      run: |
        echo "Validating SSH key format..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keygen -l -f ~/.ssh/deploy_key || (echo "Invalid SSH key format"; exit 1)

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "=== DEPLOYING ORDER SERVICE ==="
          # Apply database components first
          kubectl apply -f ~/lugx-frontend/order_service/order-postgres-deployment.yaml
          kubectl apply -f ~/lugx-frontend/order_service/order-postgres-service.yaml
          
          # Then deploy the order service
          kubectl apply -f ~/lugx-frontend/order_service/order-service-deployment.yaml
          kubectl apply -f ~/lugx-frontend/order_service/order-service-service.yaml
          kubectl rollout status deployment/order-service --timeout=180s
          
          echo "=== BLUE-GREEN FRONTEND DEPLOYMENT ==="
    - name: Deploy Blue-Green Frontend
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          set -e
          WORK_DIR=~/lugx-frontend/deploy
          IMAGE=${{ secrets.DOCKER_USERNAME }}/iit-nginx-static:${{ github.sha }}
          mkdir -p "$WORK_DIR"

          # decide next colour
          CURRENT=$(kubectl get svc lugx-frontend -o jsonpath='{.spec.selector.color}' 2>/dev/null || echo "blue")
          [ "$CURRENT" = "blue" ] && NEW=green || NEW=blue
          OLD=$CURRENT

          # generate NEW colour deployment in-line
          cat > "$WORK_DIR/frontend-${NEW}.yaml" <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: lugx-frontend-${NEW}
          spec:
            replicas: 2
            selector:
              matchLabels: { app: lugx-frontend, color: ${NEW} }
            template:
              metadata:
                labels: { app: lugx-frontend, color: ${NEW} }
              spec:
                containers:
                - name: frontend
                  image: ${IMAGE}
                  ports: [{ containerPort: 80 }]
          EOF

          # create/update service once
          cat > "$WORK_DIR/frontend-svc.yaml" <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: lugx-frontend
          spec:
            type: LoadBalancer
            selector: { app: lugx-frontend, color: ${NEW} }
            ports: [{ port: 80, targetPort: 80 }]
          EOF

          # apply both
          kubectl apply -f "$WORK_DIR/frontend-${NEW}.yaml"
          kubectl apply -f "$WORK_DIR/frontend-svc.yaml"
          kubectl rollout status deployment/lugx-frontend-${NEW} --timeout=180s

          # switch traffic
          kubectl patch svc lugx-frontend -p "{\"spec\":{\"selector\":{\"color\":\"${NEW}\"}}}"

          # scale old colour to zero
          kubectl scale deployment/lugx-frontend-${OLD} --replicas=0 2>/dev/null || true

          echo "Frontend switched from ${OLD} -> ${NEW}"
          kubectl get pods -l app=lugx-frontend

          echo "=== VERIFICATION ==="
          kubectl get pods
          kubectl get svc
          echo "Frontend is now running on ${NEW_COLOR} environment"
          echo "Order Service is running at:"
          kubectl get svc order-service -o jsonpath='{.spec.clusterIP}'
