
name: CI/CD for Lugx Frontend

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/lugx-frontend:latest

    - name: Validate SSH Key
      run: |
        echo "Validating SSH key format..."
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keygen -l -f ~/.ssh/deploy_key || (echo "Invalid SSH key format"; exit 1)
        echo "Key is valid"

    - name: Show Diagnostic Info
      run: |
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
        echo "EC2_USER: ${{ secrets.EC2_USER }}"
        echo "Key prefix: ${SECRET_EC2_SSH_PRIVATE_KEY:0:20}..."
        echo "Key suffix: ...${SECRET_EC2_SSH_PRIVATE_KEY: -20}"
      env:
        SECRET_EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        timeout: 30s
        script_timeout: 5m
        envs: CI=true
        debug: true
        script: |
          echo "=== BLUE-GREEN DEPLOYMENT START ==="
          
          CURRENT_COLOR=$(kubectl get svc lugx-frontend -o jsonpath='{.spec.selector.color}' || echo "blue")
		 
		  
											
          if [ "$CURRENT_COLOR" = "blue" ]; then
            NEW_COLOR="green"
          else
            NEW_COLOR="blue"
          fi
          echo "Deploying to $NEW_COLOR environment..."

          # Apply the new deployment manifest
          kubectl apply -f ~/lugx-frontend/deployment-${NEW_COLOR}.yaml

          # Wait for the new deployment to become ready
          kubectl rollout status deployment/lugx-frontend-${NEW_COLOR} --timeout=180s

		  
          # Switch traffic to the new version
          kubectl patch svc lugx-frontend -p "{\"spec\":{\"selector\":{\"color\":\"${NEW_COLOR}\"}}}"

          # Optionally scale down the old version
          kubectl scale deployment/lugx-frontend-${CURRENT_COLOR} --replicas=0

		   
		
		  
											 
			
		  
          echo "=== VERIFICATION ==="
          kubectl get pods -A
          kubectl get svc -A
          kubectl get ingress -A

          echo "=== DEPLOYMENT COMPLETE ==="

    - name: Verify Deployment
      run: |
        echo "Checking deployment status..."
        # (Optional) Add curl check, smoke tests, etc.
